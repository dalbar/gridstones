// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE

import * as Menu from "./ml/menu.bs.js";
import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Board from "./ml/board.bs.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as State from "./ml/state.bs.js";
import * as Phaser from "phaser";
import * as Js_json from "../node_modules/bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/bs-platform/lib/es6/belt_Option.js";
import * as Belt_MapString from "../node_modules/bs-platform/lib/es6/belt_MapString.js";

var type_ = (Phaser.AUTO);

var game_config = {
  width: 600,
  height: 800,
  type: type_,
  backgroundColor: "#f3cca3",
  scene: /* [] */0
};

var game = new Phaser.Game(game_config);

var address = "ws://127.0.0.1:8081";

var ws = new WebSocket(address);

var game_state = /* record */[/* contents */State.init(/* () */0)];

var listeners = /* record */[/* contents */Belt_MapString.empty];

function set_game_state(new_state) {
  game_state[0] = new_state;
  return /* () */0;
}

function dispatch_game_state(key, action) {
  game_state[0] = State.dispatch(game_state[0], listeners[0], key, action);
  return /* () */0;
}

function handle_event($$event) {
  var data = Belt_Option.getExn(Js_json.decodeObject(JSON.parse($$event["data"])));
  var type_ = Belt_Option.getExn(Js_json.decodeString(data["type"]));
  switch (type_) {
    case "HAND" : 
        var hand = Belt_Array.map(Belt_Option.getExn(Js_json.decodeArray(data["hand"])), (function (pattern) {
                return Belt_Array.map(Belt_Option.getExn(Js_json.decodeArray(pattern)), (function (row) {
                              return Belt_Array.map(Belt_Option.getExn(Js_json.decodeArray(row)), (function (entry) {
                                            return Belt_Option.getExn(Js_json.decodeNumber(entry));
                                          }));
                            }));
              }));
        return dispatch_game_state(State.hand_event, /* HAND */Block.__(3, [hand]));
    case "ID" : 
        var id = Belt_Option.getExn(Js_json.decodeString(data["id"]));
        return dispatch_game_state(State.id_event, /* ID */Block.__(2, [id]));
    case "MOVE" : 
        var move = State.parse_move_object(Belt_Option.getExn(Js_json.decodeObject(data["move"])));
        return dispatch_game_state(State.move_event, /* MOVE */Block.__(0, [move]));
    case "PHASE" : 
        var phase = Belt_Option.getExn(Js_json.decodeString(data["phase"]));
        return dispatch_game_state(State.phase_event, /* PHASE */Block.__(4, [phase]));
    case "PLAYERS" : 
        var players = Belt_Array.map(Belt_Option.getExn(Js_json.decodeArray(data["players"])), (function (player) {
                return State.parse_player_object(Belt_Option.getExn(Js_json.decodeObject(player)));
              }));
        return dispatch_game_state(State.players_event, /* PLAYERS */Block.__(1, [players]));
    case "WINNER" : 
        var winner = Belt_Option.getExn(Js_json.decodeString(data["winner"]));
        return dispatch_game_state(State.winner_event, /* WINNER */Block.__(5, [winner]));
    default:
      return /* () */0;
  }
}

function send_js_dict(dict) {
  ws.send(JSON.stringify(dict));
  return /* () */0;
}

function handle_register(param) {
  var register_msg = { };
  register_msg["type"] = "REGISTER";
  return send_js_dict(register_msg);
}

function send_start(param) {
  var start_msg = { };
  start_msg["type"] = "PHASE";
  start_msg["phase"] = "start";
  return send_js_dict(start_msg);
}

function send_move(x, y) {
  var move_msg = { };
  var move_dict = { };
  move_dict["x"] = x;
  move_dict["y"] = y;
  move_msg["type"] = "MOVE";
  move_msg["move"] = move_dict;
  return send_js_dict(move_msg);
}

function send_winner(id) {
  var winner_msg = { };
  winner_msg["type"] = "WINNER";
  winner_msg["id"] = id;
  return send_js_dict(winner_msg);
}

function subscribe(_event, fn) {
  var match = State.subscribe(listeners[0], _event, Curry.__1(fn));
  listeners[0] = match[0];
  return match[1];
}

var scene_config_000 = /* state */game_state[0];

var scene_config = /* record */[
  scene_config_000,
  /* subscribe */subscribe,
  /* send_move */send_move,
  /* send_winner */send_winner,
  /* handle_register */handle_register,
  /* send_start */send_start
];

function handle_open(param) {
  var manager = game.scene;
  manager.add("menu", Menu.scene);
  manager.add("board", Board.scene);
  manager.start("menu", scene_config);
  return /* () */0;
}

ws.addEventListener("open", (function (param) {
        return handle_open(/* () */0);
      }));

ws.addEventListener("message", handle_event);

export {
  type_ ,
  game_config ,
  game ,
  address ,
  ws ,
  game_state ,
  listeners ,
  set_game_state ,
  dispatch_game_state ,
  handle_event ,
  send_js_dict ,
  handle_register ,
  send_start ,
  send_move ,
  send_winner ,
  subscribe ,
  scene_config ,
  handle_open ,
  
}
/* type_ Not a pure module */
