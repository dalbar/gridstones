// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE

import * as Block from "../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_json from "../../node_modules/bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "../../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "../../node_modules/bs-platform/lib/es6/belt_Option.js";
import * as Belt_MapString from "../../node_modules/bs-platform/lib/es6/belt_MapString.js";

function parse_int_from_dict(dict, key) {
  return Belt_Option.getExn(Js_json.decodeNumber(dict[key])) | 0;
}

function parse_string_from_dict(dict, key) {
  return Belt_Option.getExn(Js_json.decodeString(dict[key]));
}

function parse_move_object(dict) {
  var x = parse_int_from_dict(dict, "x");
  var y = parse_int_from_dict(dict, "y");
  var next_player = parse_string_from_dict(dict, "nextPlayer");
  return /* record */[
          /* x */x,
          /* y */y,
          /* next_player */next_player
        ];
}

function parse_player_object(dict) {
  var score = parse_int_from_dict(dict, "score");
  var id = parse_string_from_dict(dict, "id");
  return /* record */[
          /* id */id,
          /* score */score
        ];
}

function init(param) {
  return /* record */[
          /* last_move : record */[
            /* x */-1,
            /* y */-1,
            /* next_player */""
          ],
          /* players : array */[],
          /* id */"",
          /* phase */"",
          /* hand : array */[],
          /* winner */""
        ];
}

function mOVE(param_0) {
  return /* MOVE */Block.__(0, [param_0]);
}

function pLAYERS(param_0) {
  return /* PLAYERS */Block.__(1, [param_0]);
}

function iD(param_0) {
  return /* ID */Block.__(2, [param_0]);
}

function hAND(param_0) {
  return /* HAND */Block.__(3, [param_0]);
}

function pHASE(param_0) {
  return /* PHASE */Block.__(4, [param_0]);
}

function wINNER(param_0) {
  return /* WINNER */Block.__(5, [param_0]);
}

function initMap(param) {
  return Belt_MapString.empty;
}

function notify(listeners, key, state) {
  if (Belt_MapString.has(listeners, key)) {
    return Belt_Array.forEach(Belt_MapString.getExn(listeners, key), (function (fn) {
                  return Curry._1(fn, state);
                }));
  } else {
    return 0;
  }
}

function update_state(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */[
                /* last_move */action[0],
                /* players */state[/* players */1],
                /* id */state[/* id */2],
                /* phase */state[/* phase */3],
                /* hand */state[/* hand */4],
                /* winner */state[/* winner */5]
              ];
    case 1 : 
        return /* record */[
                /* last_move */state[/* last_move */0],
                /* players */action[0],
                /* id */state[/* id */2],
                /* phase */state[/* phase */3],
                /* hand */state[/* hand */4],
                /* winner */state[/* winner */5]
              ];
    case 2 : 
        return /* record */[
                /* last_move */state[/* last_move */0],
                /* players */state[/* players */1],
                /* id */action[0],
                /* phase */state[/* phase */3],
                /* hand */state[/* hand */4],
                /* winner */state[/* winner */5]
              ];
    case 3 : 
        return /* record */[
                /* last_move */state[/* last_move */0],
                /* players */state[/* players */1],
                /* id */state[/* id */2],
                /* phase */state[/* phase */3],
                /* hand */action[0],
                /* winner */state[/* winner */5]
              ];
    case 4 : 
        return /* record */[
                /* last_move */state[/* last_move */0],
                /* players */state[/* players */1],
                /* id */state[/* id */2],
                /* phase */action[0],
                /* hand */state[/* hand */4],
                /* winner */state[/* winner */5]
              ];
    case 5 : 
        return /* record */[
                /* last_move */state[/* last_move */0],
                /* players */state[/* players */1],
                /* id */state[/* id */2],
                /* phase */state[/* phase */3],
                /* hand */state[/* hand */4],
                /* winner */action[0]
              ];
    
  }
}

function dispatch(state, listeners, key, action) {
  var new_state = update_state(state, action);
  notify(listeners, key, new_state);
  return new_state;
}

function subscribe(listeners, $$event, fn) {
  var new_list;
  try {
    var cur_listeners = Belt_MapString.getExn(listeners, $$event);
    new_list = Belt_Array.concat(cur_listeners, Belt_Array.make(1, fn));
  }
  catch (exn){
    new_list = Belt_Array.make(1, fn);
  }
  var newIndex = new_list.length;
  return /* tuple */[
          Belt_MapString.set(listeners, $$event, new_list),
          newIndex
        ];
}

function unsubscribe(listeners, $$event, idx) {
  try {
    return Belt_MapString.set(listeners, $$event, Belt_Array.keepWithIndex(Belt_MapString.getExn(listeners, $$event), (function (param, i) {
                      return i === idx;
                    })));
  }
  catch (exn){
    return listeners;
  }
}

var move_event = "move";

var players_event = "move";

var id_event = "id";

var hand_event = "hand";

var phase_event = "phase";

var winner_event = "winner";

export {
  parse_int_from_dict ,
  parse_string_from_dict ,
  parse_move_object ,
  parse_player_object ,
  init ,
  move_event ,
  players_event ,
  id_event ,
  hand_event ,
  phase_event ,
  winner_event ,
  mOVE ,
  pLAYERS ,
  iD ,
  hAND ,
  pHASE ,
  wINNER ,
  initMap ,
  notify ,
  update_state ,
  dispatch ,
  subscribe ,
  unsubscribe ,
  
}
/* No side effect */
