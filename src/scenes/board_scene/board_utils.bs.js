// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE

import * as Belt_Array from "./../../../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "./../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "./../../../node_modules/bs-platform/lib/es6/caml_int32.js";

function transform_world_to_image_coords(x, y, canvas_width, canvas_height) {
  return /* record */[
          /* x */(canvas_width / 2 | 0) + x | 0,
          /* y */(canvas_height / 2 | 0) + y | 0
        ];
}

function get_n_m_board(n, m) {
  return Belt_Array.map(Belt_Array.make(m, 0), (function (param) {
                return Belt_Array.make(n, param);
              }));
}

function scale_marble_size(board_width, board_height, $staropt$star) {
  var p = $staropt$star !== undefined ? $staropt$star : 0.0;
  return /* record */[
          /* width */board_width / 6.0 - p,
          /* height */board_height / 6.0 - p
        ];
}

function dot_product(m1, m2) {
  var flattened_m1 = Belt_Array.concatMany(m1);
  var flattened_m2 = Belt_Array.concatMany(m2);
  return Belt_Array.reduce(Belt_Array.zip(flattened_m1, flattened_m2), 0, (function (acc, param) {
                return Caml_int32.imul(param[0], param[1]) + acc | 0;
              }));
}

function sub_matrix(m, $staropt$star, $staropt$star$1, x_len, y_len) {
  var x_offset = $staropt$star !== undefined ? $staropt$star : 0;
  var y_offset = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var extracted_y = Belt_Array.slice(m, y_offset, y_len);
  return Belt_Array.map(extracted_y, (function (row) {
                return Belt_Array.slice(row, x_offset, x_len);
              }));
}

function conv(aoi, filter) {
  var y_size = filter.length;
  var x_size = Caml_array.caml_array_get(filter, 0).length;
  var y_size_half = (y_size - 1 | 0) / 2 | 0;
  var x_size_half = (x_size - 1 | 0) / 2 | 0;
  return Belt_Array.mapWithIndex(aoi, (function (i, row) {
                return Belt_Array.mapWithIndex(row, (function (j, param) {
                              if ((i - y_size_half | 0) < 0 || (j - x_size_half | 0) < 0) {
                                return 0;
                              } else {
                                return dot_product(sub_matrix(aoi, j - x_size_half | 0, i - y_size_half | 0, x_size, y_size), filter);
                              }
                            }));
              }));
}

var res = Belt_Array.map(Belt_Array.make(6, "42a5f5"), (function (param) {
        return Belt_Array.make(6, param);
      }));

Belt_Array.forEachWithIndex(res, (function (y, rows) {
        return Belt_Array.forEachWithIndex(rows, (function (x, param) {
                      var x$1 = x;
                      var y$1 = y;
                      var match = x$1 < 5;
                      var match$1 = y$1 < 5;
                      var exit = 0;
                      var exit$1 = 0;
                      if (x$1 !== 0 || !(match && match$1)) {
                        exit$1 = 2;
                      } else {
                        return Caml_array.caml_array_set(Caml_array.caml_array_get(res, x$1), y$1, "fdd835");
                      }
                      if (exit$1 === 2) {
                        if (y$1 !== 0) {
                          if (y$1 !== 5) {
                            exit = 1;
                          } else {
                            return Caml_array.caml_array_set(Caml_array.caml_array_get(res, x$1), y$1, "ff5722");
                          }
                        } else if (match && match$1) {
                          return Caml_array.caml_array_set(Caml_array.caml_array_get(res, x$1), y$1, "fdd835");
                        } else {
                          exit = 1;
                        }
                      }
                      if (exit === 1) {
                        if (x$1 !== 5) {
                          return Caml_array.caml_array_set(Caml_array.caml_array_get(res, x$1), y$1, "42a5f5");
                        } else {
                          return Caml_array.caml_array_set(Caml_array.caml_array_get(res, x$1), y$1, "ff5722");
                        }
                      }
                      
                    }));
      }));

var color_map = res;

export {
  transform_world_to_image_coords ,
  get_n_m_board ,
  scale_marble_size ,
  dot_product ,
  sub_matrix ,
  conv ,
  color_map ,
  
}
/* res Not a pure module */
