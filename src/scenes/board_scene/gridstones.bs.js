// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE

import * as Belt_Array from "../../../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Board_utils from "./board_utils.bs.js";
import * as Caml_primitive from "../../../node_modules/bs-platform/lib/es6/caml_primitive.js";

function area_of_interest(position, grid_size) {
  return /* record */[
          /* min_x */Caml_primitive.caml_int_max(position[/* x */0] - grid_size | 0, 0),
          /* min_y */Caml_primitive.caml_int_max(position[/* y */1] - grid_size | 0, 0),
          /* max_x */Caml_primitive.caml_int_max(position[/* x */0] + grid_size | 0, 0),
          /* max_y */Caml_primitive.caml_int_max(position[/* y */1] + grid_size | 0, 0)
        ];
}

function has_match(board_state, pattern) {
  var num_stones = Belt_Array.reduce(Belt_Array.concatMany(pattern), 0, (function (acc, slot) {
          if (slot === 1) {
            return acc + 1 | 0;
          } else {
            return acc;
          }
        }));
  return Belt_Array.some(Belt_Array.concatMany(Board_utils.conv(board_state, pattern)), (function (e) {
                return e === num_stones;
              }));
}

function matches_any_pattern(board_state, patterns) {
  return Belt_Array.keep(Belt_Array.mapWithIndex(patterns, (function (i, pattern) {
                    return /* tuple */[
                            i,
                            has_match(board_state, pattern)
                          ];
                  })), (function (param) {
                return param[1];
              }));
}

function modify_slot(board_state, position, value) {
  return Caml_array.caml_array_set(Caml_array.caml_array_get(board_state, position[/* y */1]), position[/* x */0], value);
}

var p1 = Belt_Array.map(Belt_Array.make(3, -1), (function (param) {
        return Belt_Array.make(3, param);
      }));

Caml_array.caml_array_set(Caml_array.caml_array_get(p1, 0), 0, 1);

Caml_array.caml_array_set(Caml_array.caml_array_get(p1, 0), 2, 1);

Caml_array.caml_array_set(Caml_array.caml_array_get(p1, 2), 0, 1);

var pattern1 = p1;

export {
  area_of_interest ,
  has_match ,
  matches_any_pattern ,
  modify_slot ,
  pattern1 ,
  
}
/* p1 Not a pure module */
